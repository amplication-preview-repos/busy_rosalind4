/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lobby } from "./Lobby";
import { LobbyCountArgs } from "./LobbyCountArgs";
import { LobbyFindManyArgs } from "./LobbyFindManyArgs";
import { LobbyFindUniqueArgs } from "./LobbyFindUniqueArgs";
import { CreateLobbyArgs } from "./CreateLobbyArgs";
import { UpdateLobbyArgs } from "./UpdateLobbyArgs";
import { DeleteLobbyArgs } from "./DeleteLobbyArgs";
import { LobbyService } from "../lobby.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lobby)
export class LobbyResolverBase {
  constructor(
    protected readonly service: LobbyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "read",
    possession: "any",
  })
  async _lobbiesMeta(
    @graphql.Args() args: LobbyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lobby])
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "read",
    possession: "any",
  })
  async lobbies(@graphql.Args() args: LobbyFindManyArgs): Promise<Lobby[]> {
    return this.service.lobbies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lobby, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "read",
    possession: "own",
  })
  async lobby(
    @graphql.Args() args: LobbyFindUniqueArgs
  ): Promise<Lobby | null> {
    const result = await this.service.lobby(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lobby)
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "create",
    possession: "any",
  })
  async createLobby(@graphql.Args() args: CreateLobbyArgs): Promise<Lobby> {
    return await this.service.createLobby({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lobby)
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "update",
    possession: "any",
  })
  async updateLobby(
    @graphql.Args() args: UpdateLobbyArgs
  ): Promise<Lobby | null> {
    try {
      return await this.service.updateLobby({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lobby)
  @nestAccessControl.UseRoles({
    resource: "Lobby",
    action: "delete",
    possession: "any",
  })
  async deleteLobby(
    @graphql.Args() args: DeleteLobbyArgs
  ): Promise<Lobby | null> {
    try {
      return await this.service.deleteLobby(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
